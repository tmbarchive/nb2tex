#!/usr/bin/python

import markdown,re,base64,os,sys
import simplejson as json
import argparse
from pylab import *

listings = r"""
\usepackage{listings}
\usepackage{color}
\definecolor{mylight}{rgb}{0.9,0.9,0.9}
\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{myblue}{rgb}{0,0,0.6}
\definecolor{mygray}{rgb}{0.6,0.6,0.6}
\definecolor{myviolet}{rgb}{0.6,0,0.6}
\lstset{ %
backgroundcolor=\color{mylight}, %
basicstyle=\ttfamily\fontsize{8pt}{8pt}, %
breakatwhitespace=false, %
breaklines=true, %
captionpos=b, %
commentstyle=\color{mygreen}, %
frame=single, %
keywordstyle=\color{myblue}, %
language=Python, %
numbers=left, %
numbersep=5pt, %
numberstyle=\tiny\color{mygray}, %
showspaces=false, %
tabsize=2, %
stringstyle=\color{myviolet} %
}
"""

tex_start = r"""
\documentclass{article}
\usepackage{graphicx}"""+listings+r"""
\parindent0ex
\parsep1ex
\parskip1ex
\begin{document}
"""

tex_end = r"""
\end{document}
"""

beamer = 0

beamer_start = r"""
\documentclass{beamer}
\usepackage{graphicx}"""+listings+r"""
\useoutertheme{infolines}
\usetheme{default}
\parindent0ex
\parsep1ex
\parskip1ex
\begin{document}
"""

beamer_end = r"""
\end{document}
"""

def makelist(text):
    result = "\\begin{itemize}\n"
    result += re.sub(r"^\s*-\s+(.*)\n(?m)","\\item \\1\n",text)
    result += "\\end{itemize}\n"
    return result

title = ""
author = ""

def convert_markdown_to_tex(cell):
    assert cell["cell_type"]=="markdown"
    source = cell["source"]
    source = [re.sub("\n$","",s) for s in source]
    if source[0].strip().startswith("Title:"):
        global title,author
        _,title = re.split(r'\s+',source[0],1)
        _,author = re.split(r'\s+',source[1],1)
        return ""
    if source[0].strip()=="": return ""
    m = re.match(r'^\s*\((.*)\)\s*$',source[0])
    if m: 
        ftitle = m.group(1)
        source = source[1:]
    else:
        ftitle = None
    source = "\n".join(source)+"\n"
    # itemization
    source = re.sub(r"\n(\s*-\s+.*\n)+",lambda g:makelist(g.group(0)),source)
    # replace top level math
    source = re.sub(r"^\s*\$([^$]+)\$\s*$(?m)",r"\\begin{equation}\1\\end{equation}"+"\n",source)
    # section headings
    source = re.sub(r"(.*)\n+====*","\\section{\\1}\n",source)
    source = re.sub(r"(.*)\n+----*","\\subsection{\\1}\n",source)
    # paragraphs
    source = re.sub(r"\n\n+","\n\\par\n",source)
    source = re.split(r"(\$\$[^$]+?\$\$|\$[^$]+?\$|\\begin{equation}.*?\\end{equation})(?s)",source)
    for i in range(0,len(source),2):
        source[i] = re.sub(r"\*(.*?)\*","{\\\\bf \\1}",source[i])
        source[i] = re.sub(r"_(.*?)_","{\\\\it \\1}",source[i])
        source[i] = re.sub(r'`(.*?)`',"\\\\verb|\\1|",source[i])
        source[i] = re.sub(r'"(.*?)"',"``\\1''",source[i])
    source = " ".join(source)
    if beamer and ftitle is not None and ftitle!="":
        return "\n\\frametitle{%s}\n%s\n"%(ftitle,source)
    else:
        return "\n%s\n"%(source,)

def convert_code_to_tex(cell):
    assert cell["cell_type"]=="code"
    assert cell["language"]=="python"
    code = cell["input"]
    if len(code)<1: return ""
    if code[0].strip()=="": return ""
    m = re.match(r'^#\s*(.*)\s*$',code[0])
    if m: 
        ftitle = m.group(1)
        code = code[1:]
    else:
        ftitle = None
    code = [re.sub("\n","",c) for c in code]
    code = "\n".join(code)
    result = "\n"
    if ftitle is not None and beamer: result += "\\frametitle{%s}\n"%(ftitle,)
    result += "\\begingroup\\fontsize{8pt}{8pt}\\selectfont\n"
    result += "\n\\par\\vskip1ex\n\\begin{lstlisting}\n"
    result += code
    result += "\n\\end{lstlisting}\n\\par\n"
    result += "\\endgroup\n"
    stdout = ["".join(s["text"]) for s in cell["outputs"] if s.get("stream")=="stdout"]
    stdout = "".join(stdout)
    stdout = re.split(r'\n',stdout)
    if len(stdout)>10:
        stdout = stdout[:5]+"..."+stdout[-5:]
    stdout = "\n".join(stdout)
    result += "\\begingroup\\fontsize{8pt}{8pt}\\selectfont\n"
    result += "\n\\begin{verbatim}\n"
    result += stdout+"\n"
    result += "\n\\end{verbatim}\n"
    result += "\\endgroup\n"
    pngs = [s for s in cell["outputs"] if s["output_type"]=="display_data"]
    for j,out in enumerate(pngs):
        result += "\n\\begin{center}\n"
        result += "%% image %s_%d\n"%(cell["prompt_number"],j)
        png = base64.standard_b64decode(out["png"])
        png_name = image_prefix+"%03d_%02d.png"%(int(cell["prompt_number"]),int(j))
        with open(png_name,"wb") as stream: stream.write(png)
        image = imread(png_name)
        h,w = image.shape[:2]
        th,tw = 1.5,4.0
        if h/th>w/tw:
            result += "    \\includegraphics[height=%fin]{%s}\n"%(th,png_name)
        else:
            result += "    \\includegraphics[width=%fin]{%s}\n"%(tw,png_name)
        result += "\\end{center}\n"
    return result

def convert_all(cells):
    results = []
    for cell in cells:
        if cell["cell_type"]=="markdown":
            result = convert_markdown_to_tex(cell)
        elif cell["cell_type"]=="code":
            result = convert_code_to_tex(cell)
        elif cell["cell_type"]=="heading":
            if cell["level"]>=3:
                result = "\n\\subsubsection{%s}\n\n"%("\n".join(cell["source"]))
            elif cell["level"]==2:
                result = "\n\\subsection{%s}\n\n"%("\n".join(cell["source"]))
            elif cell["level"]==1:
                result = "\n\\section{%s}\n\n"%("\n".join(cell["source"]))
            else:
                raise Exception("oops")
        else:
            print "unknown cell:",repr(cell)
            result = "\n\\begin{verbatim}\n"
            result += "    UNKNOWN CELL\n"
            result += "    "+cell["cell_type"]+"\n"
            result += "    "+repr(cell)+"\n"
            result += "\n\\end{verbatim}\n"
        results.append(result)
    return results

def convert_all_beamer(cells):
    results = []
    for cell in cells:
        if cell["cell_type"]=="markdown":
            content = convert_markdown_to_tex(cell).strip()
            result = ""
            if len(content)>10:
                result = "\n\\begin{frame}[fragile]\n"
                result += content
                result += "\n\\end{frame}\n"
        elif cell["cell_type"]=="code":
            content = convert_code_to_tex(cell).strip()
            result = ""
            if len(content)>10:
                result = "\n\\begin{frame}[fragile]\n"
                result += content
                result += "\n\\end{frame}\n"
        elif cell["cell_type"]=="heading":
            result = "\n\\begin{frame}[plain]\n"
            result += "\\obeylines"
            if cell["level"]>=2:
                result += "{\Large %s}\n"%"\n".join(cell["source"])
            else:
                result += "{\Huge %s}\n"%"\n".join(cell["source"])
            result += "\n\\end{frame}\n"
        else:
            print "unknown cell:",repr(cell)
            result = "\n\\begin{frame}[fragile]\n"
            result += "\n\\begin{verbatim}\n"
            result += "    UNKNOWN CELL\n"
            result += "    "+cell["cell_type"]+"\n"
            result += "    "+repr(cell)+"\n"
            result += "\n\\end{verbatim}\n"
            result += "\n\\end{frame}\n"
        results.append(result)
    return results

parser = argparse.ArgumentParser("apply an RNN recognizer")
parser.add_argument("--noheader","-n",action="store_true")
parser.add_argument("--beamer","-b",action="store_true")
parser.add_argument("--figs","-F",default="_figs")
parser.add_argument("--prefix","-p",default=None)
parser.add_argument("inputs",nargs="+")
args = parser.parse_args()
beamer = args.beamer

for fname in args.inputs:
    print "converting",fname
    dname = os.path.normpath(os.path.dirname(fname))
    prefix = args.prefix
    if prefix is None:
        s = re.sub(r"\.ipynb$","",fname)
        s = re.sub(r'[^a-zA-Z0-9]+',"_",s)
        prefix = s
    image_dir = dname + "/" + args.figs
    if not os.path.exists(image_dir): os.mkdir(image_dir)
    image_prefix = image_dir + "/" + prefix + "_"
    base,_ = os.path.splitext(fname)
    title = base
    author = ""
    with open(fname) as stream: nb = json.load(stream)
    cells = nb["worksheets"][0]["cells"]
    if args.beamer:
        results = convert_all_beamer(cells)
        with open(base+"-slides.tex","w") as stream:
            stream.write(beamer_start)
            stream.write("\\title{%s}\n"%title)
            stream.write("\\author{%s}\n"%author)
            stream.write("\\maketitle\n")
            for result in results: stream.write(result)
            stream.write(beamer_end)
    else:
        results = convert_all(cells)
        with open(base+".tex","w") as stream:
            stream.write(tex_start)
            stream.write("\\title{%s}\n"%title)
            stream.write("\\author{%s}\n"%author)
            stream.write("\\maketitle\n")
            for result in results: stream.write(result)
            stream.write(tex_end)
